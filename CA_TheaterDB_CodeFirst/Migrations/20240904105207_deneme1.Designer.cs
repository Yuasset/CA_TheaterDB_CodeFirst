// <auto-generated />
using System;
using CA_TheaterDB_CodeFirst.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CA_TheaterDB_CodeFirst.Migrations
{
    [DbContext(typeof(TheaterDBContext))]
    [Migration("20240904105207_deneme1")]
    partial class deneme1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Action"
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Comedy"
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Drama"
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Fantasy"
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Horror"
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Mystery"
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.",
                            Duration = 136,
                            MovieName = "The Matrix"
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.MovieCategory", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("MovieID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("MovieCategories");

                    b.HasData(
                        new
                        {
                            MovieID = 1,
                            CategoryID = 1
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Saloon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("SaloonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Saloons");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Capacity = 100,
                            SaloonName = "Saloon 1"
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Session", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("SessionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            SessionTime = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Theater", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("SaloonID")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<int>("WeekID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("SaloonID");

                    b.HasIndex("SessionID");

                    b.HasIndex("WeekID");

                    b.ToTable("Theaters");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            MovieID = 1,
                            SaloonID = 1,
                            SessionID = 1,
                            WeekID = 1
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Week", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("WakeFirstDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WakeLastDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("WeekName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Weeks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            WakeFirstDay = new DateTime(2021, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WakeLastDay = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeekName = "Week 1"
                        });
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.MovieCategory", b =>
                {
                    b.HasOne("CA_TheaterDB_CodeFirst.Entities.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA_TheaterDB_CodeFirst.Entities.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Theater", b =>
                {
                    b.HasOne("CA_TheaterDB_CodeFirst.Entities.Movie", "Movie")
                        .WithMany("Theater")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA_TheaterDB_CodeFirst.Entities.Saloon", "Saloon")
                        .WithMany("Theater")
                        .HasForeignKey("SaloonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA_TheaterDB_CodeFirst.Entities.Session", "Session")
                        .WithMany("Theater")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA_TheaterDB_CodeFirst.Entities.Week", "Week")
                        .WithMany("Theater")
                        .HasForeignKey("WeekID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Saloon");

                    b.Navigation("Session");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Category", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Movie", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Saloon", b =>
                {
                    b.Navigation("Theater");
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Session", b =>
                {
                    b.Navigation("Theater");
                });

            modelBuilder.Entity("CA_TheaterDB_CodeFirst.Entities.Week", b =>
                {
                    b.Navigation("Theater");
                });
#pragma warning restore 612, 618
        }
    }
}
